#content based final...(Untitled 2).........

import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from pandas import DataFrame
from nltk.corpus import stopwords

products_n = pd.read_csv("F:\SEM 6\IP\Dataset_merged2.csv")
products_n.shape

products_wd = products_n[products_n['description'].notnull()].copy()
products_wd.shape

# only retain record with more than 5 characters description
products_wd = products_wd[products_wd['description'].map(len) >5]
products_wd.shape

products_wd['description']

products_wd.reset_index(drop=True, inplace=True)
products_wd.head()

tf = TfidfVectorizer(analyzer='word', ngram_range=(1, 3), min_df=0, stop_words='english')
tfidf_des = tf.fit_transform(products_wd['description'])
print(tfidf_des)

indices_n = pd.Series(products_wd['ProductId'])
inddict = indices_n.to_dict()
print(inddict)


#changing the selection of products from index to ProductId
inddict = dict((v,k) for k,v in inddict.items())
print(inddict)

#euclidean distance
from sklearn.metrics.pairwise import euclidean_distances
D = euclidean_distances(tfidf_des)
print(D)

def recommend_euclidean_distance(ProductId):
    ind = inddict[ProductId]
    distance = list(enumerate(D[ind]))
     
    distance = sorted(distance, key=lambda x: x[1])
    distance = distance[1:50]
    #Get the products index
    products_index = [i[0] for i in distance]

    #Return the top most similar products using integar-location based indexing (iloc)
    return products_wd.iloc[products_index]
recommend_euclidean_distance('7535842801')


df=pd.DataFrame(recommend_euclidean_distance("7535842801"))
df.head(50)
list(set(df.title))
.............................